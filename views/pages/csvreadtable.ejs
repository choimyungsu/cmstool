<link rel="stylesheet" href="/css/custom.css">
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            white-space: pre-wrap; /* HTML 테이블에서 줄바꿈 허용 */
        }
        th {
            background-color: #f2f2f2;
        }
        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            margin: 10px 0;
        }
        button:hover {
            background-color: #45a049;
        }
        .upload-section {
            margin: 20px 0;
        }
        textarea {
            width: 100%;
            height: 200px;
            margin: 10px 0;
            padding: 10px;
            resize: vertical;
        }
        .table-info {
            margin: 10px 0;
            font-weight: bold;
        }
    </style>
<!--begin::App Main-->
<main class="content">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="container custom-container">

                <i class="fas fa-sticky-note me-1" style="cursor: pointer;"></i>CSV to HTML Table with Excel Download
    <div class="upload-section">
        <i class="fas fa-object-ungroup me-1" style="cursor: pointer;"></i>Upload CSV File
        <input type="file" id="csvFile" accept=".csv" />
        <br><br>
        <i class="fas fa-lightbulb me-1" style="cursor: pointer;"></i>Or Enter CSV Data
        <textarea id="csvText" placeholder="Paste your CSV data here (comma-separated)..."></textarea>
        <button onclick="loadCSV()">Load CSV</button>
    </div>
    <div id="tableContainer" style="display: none;">
        <div class="table-info">
            <button onclick="downloadExcel()">Download as Excel</button>
            <span id="totalRows">Total Rows: 0</span>
        </div>
        <table id="dataTable">
            <thead id="tableHeader"></thead>
            <tbody id="tableBody"></tbody>
        </table>
    </div>



</div>
</div>
</div>
</main>
<!--end::App Main-->


    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js"></script>
    <script>
        let tableData = []; // 엑셀 다운로드 시 사용할 데이터 저장

        function loadCSV() {
            let text = '';
            const fileInput = document.getElementById('csvFile');
            const csvTextArea = document.getElementById('csvText');

            // 파일 업로드 우선, 없으면 텍스트 에리어 사용
            if (fileInput.files.length > 0) {
                const file = fileInput.files[0];
                const reader = new FileReader();
                reader.onload = function(e) {
                    text = e.target.result;
                    processCSV(text);
                };
                reader.readAsText(file);
            } else if (csvTextArea.value.trim() !== '') {
                text = csvTextArea.value;
                processCSV(text);
            } else {
                alert('Please select a CSV file or enter CSV data!');
                return;
            }
        }

        function processCSV(text) {
            const rows = text.split('\n').filter(row => row.trim() !== ''); // 빈 줄 제거

            // CSV 파싱 (콤마로 구분)
            const parseCSVRow = (row) => {
                const result = [];
                let current = '';
                let insideQuotes = false;

                for (let i = 0; i < row.length; i++) {
                    const char = row[i];
                    if (char === '"') {
                        insideQuotes = !insideQuotes;
                    } else if (char === ',' && !insideQuotes) {
                        result.push(current.trim());
                        current = '';
                    } else {
                        current += char;
                    }
                }
                result.push(current.trim()); // 마지막 값 추가
                return result;
            };

            // 첫 번째 행을 헤더로 처리
            const headers = parseCSVRow(rows[0]);
            const data = rows.slice(1).map(row => parseCSVRow(row));

            // 헤더 생성 (No. 컬럼 추가)
            const thead = document.getElementById('tableHeader');
            thead.innerHTML = '';
            const headerRow = document.createElement('tr');
            const noHeader = document.createElement('th');
            noHeader.textContent = 'No.';
            headerRow.appendChild(noHeader);
            headers.forEach(header => {
                const th = document.createElement('th');
                th.textContent = header.replace(/"/g, ''); // 따옴표 제거
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            // 데이터 생성 및 저장 (No. 컬럼 포함)
            const tbody = document.getElementById('tableBody');
            tbody.innerHTML = '';
            tableData = []; // 초기화
            tableData.push(['No.', ...headers.map(h => h.replace(/"/g, ''))]); // 헤더 추가 (No. 포함)

            data.forEach((row, index) => {
                const tr = document.createElement('tr');
                const rowData = [];
                // No. 컬럼 추가
                const noTd = document.createElement('td');
                const rowNumber = index + 1;
                noTd.textContent = rowNumber;
                tr.appendChild(noTd);
                rowData.push(rowNumber.toString()); // 엑셀 데이터에 No. 추가

                // 나머지 데이터 처리
                row.forEach((cell, idx) => {
                    const td = document.createElement('td');
                    cell = cell.replace(/"/g, ''); // 따옴표 제거
                    let displayValue = cell;
                    // Addresses 컬럼에서 세미콜론(;)으로 구분된 값을 줄바꿈으로 변환
                    if (headers[idx].replace(/"/g, '') === 'Addresses' && cell.includes(';')) {
                        displayValue = cell.split(';').join('\n');
                    }
                    td.textContent = displayValue;
                    tr.appendChild(td);
                    rowData.push(displayValue); // 줄바꿈 포함된 값 저장
                });
                tbody.appendChild(tr);
                tableData.push(rowData); // 데이터 추가
            });

            // 전체 라인 수 표시
            const totalRows = data.length;
            document.getElementById('totalRows').textContent = `Total Rows: ${totalRows}`;

            // 테이블과 다운로드 버튼 표시
            document.getElementById('tableContainer').style.display = 'block';
        }

        function downloadExcel() {
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.aoa_to_sheet(tableData);

            // Addresses 컬럼의 줄바꿈을 엑셀에서 인식하도록 스타일 추가
            const headers = tableData[0];
            const addressesColIndex = headers.indexOf('Addresses');
            if (addressesColIndex !== -1) {
                for (let row = 1; row < tableData.length; row++) {
                    const cellAddress = XLSX.utils.encode_cell({ r: row, c: addressesColIndex });
                    if (ws[cellAddress]) {
                        ws[cellAddress].s = { alignment: { wrapText: true } }; // 줄바꿈 스타일 적용
                    }
                }
            }

            XLSX.utils.book_append_sheet(wb, ws, "Sheet1");
            XLSX.writeFile(wb, "data.xlsx");
        }
    </script>
