<link rel="stylesheet" href="/css/custom.css">
<style>
    .textarea-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 10px;
    }

    .output-container {
        margin-top: 10px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .split-output-container {
        margin-top: 10px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .split-textarea-group {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    pre {
        background: #f4f4f4;
        padding: 10px;
        border-radius: 5px;
        flex: 1;
    }
</style>

<!--begin::App Main-->
<main class="content">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="container custom-container">
                <i class="fas fa-share-from-square me-1" style="cursor: pointer;"></i>시스코 ASA 방화벽 show run all 로그에서 네트워크 객체 / 서비스 객체 분리하기<br>
                <div class="textarea-container">
                    <textarea id="inputText" class="form-control" rows="10"
                        placeholder="여기에 ASA 방화벽 전체 정책로그를 붙여넣으세요  단) access-list전까지 로그를 추출(NAT객체의 중복을 제거하기 위함)"></textarea>
                    <button class="btn btn-sm btn-primary" onclick="extractNetworkObjects()">분리하기</button>
                </div>

                <div class="output-container">
                    <div>
                        <p>추출된 네트워크 객체 건수: <span id="networkCount">0</span></p>
                        <textarea id="networkOutput" class="form-control" rows="10" readonly></textarea>
                        <button class="btn btn-sm btn-secondary mt-2" onclick="splitNetworkOutput()">추가분리</button>
                        <div id="networkSplitOutput" class="split-output-container">
                            <p>분리된 네트워크 객체 값:</p>
                            <div id="networkSplitTextareaGroup" class="split-textarea-group"></div>
                        </div>
                    </div>
                    <div>
                        <p>추출된 서비스 객체 건수: <span id="serviceCount">0</span></p>
                        <textarea id="serviceOutput" class="form-control" rows="10" readonly></textarea>
                        <button class="btn btn-sm btn-secondary mt-2" onclick="splitServiceOutput()">추가분리</button>
                        <div id="serviceSplitOutput" class="split-output-container">
                            <p>분리된 서비스 객체 값:</p>
                            <div id="serviceSplitTextareaGroup" class="split-textarea-group"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<!--end::App Main-->

<script>
    function extractNetworkObjects() {
        const inputText = document.getElementById("inputText").value;
        const lines = inputText.split("\n");

        // 네트워크 객체 추출
        let networkObjects = [];
        let networkCount = 0;
        let isNetworkSection = false;

        // 서비스 객체 추출
        let serviceObjects = [];
        let serviceCount = 0;
        let isServiceSection = false;

        for (let line of lines) {
            // 네트워크 객체 감지
            if (line.startsWith("object network") || line.startsWith("object-group network") || line.startsWith("name")) {
                isNetworkSection = true;
                networkObjects.push(line);
                networkCount++;
            
            } else if (isNetworkSection && (line.trim().startsWith("!") || line.trim() === "")) {
                isNetworkSection = false; // 섹션 끝
            } else if (isNetworkSection) {
                networkObjects.push(line); // 네트워크 객체의 하위 라인 추가
            }

            // 서비스 객체 감지
            if (line.startsWith("object service") || line.startsWith("object-group service")) {
                isServiceSection = true;
                serviceObjects.push(line);
                serviceCount++;
            
            } else if (isServiceSection && (line.trim().startsWith("!") || line.trim() === "")) {
                isServiceSection = false; // 섹션 끝
            } else if (isServiceSection) {
                serviceObjects.push(line); // 서비스 객체의 하위 라인 추가
            }
        }

        // 결과 표시
        document.getElementById("networkCount").textContent = networkCount;
        document.getElementById("networkOutput").value = networkObjects.join("\n");
        document.getElementById("serviceCount").textContent = serviceCount;
        document.getElementById("serviceOutput").value = serviceObjects.join("\n");

        // 추가분리 초기화
        document.getElementById("networkSplitTextareaGroup").innerHTML = "";
        document.getElementById("serviceSplitTextareaGroup").innerHTML = "";
    }

    function splitNetworkOutput() {
        const networkText = document.getElementById("networkOutput").value;
        const lines = networkText.split("\n");
        const splitLines = lines.map(line => line.split(/\s+/));
        const maxColumns = Math.max(...splitLines.map(line => line.length));

        const splitTextareaGroup = document.getElementById("networkSplitTextareaGroup");
        splitTextareaGroup.innerHTML = ""; // 기존 내용 초기화

        for (let col = 0; col < maxColumns; col++) {
            const columnValues = splitLines.map(line => line[col] || "").filter(Boolean); // 빈 값 제외
            if (columnValues.length > 0) {
                const textarea = document.createElement("textarea");
                textarea.className = "form-control";
                textarea.rows = Math.max(columnValues.length, 1); // 최소 1줄
                textarea.value = columnValues.join("\n");
                textarea.readOnly = true;
                splitTextareaGroup.appendChild(textarea);
            }
        }
    }

    function splitServiceOutput() {
        const serviceText = document.getElementById("serviceOutput").value;
        const lines = serviceText.split("\n");
        const splitLines = lines.map(line => line.split(/\s+/));
        const maxColumns = Math.max(...splitLines.map(line => line.length));

        const splitTextareaGroup = document.getElementById("serviceSplitTextareaGroup");
        splitTextareaGroup.innerHTML = ""; // 기존 내용 초기화

        for (let col = 0; col < maxColumns; col++) {
            const columnValues = splitLines.map(line => line[col] || "").filter(Boolean); // 빈 값 제외
            if (columnValues.length > 0) {
                const textarea = document.createElement("textarea");
                textarea.className = "form-control";
                textarea.rows = Math.max(columnValues.length, 1); // 최소 1줄
                textarea.value = columnValues.join("\n");
                textarea.readOnly = true;
                splitTextareaGroup.appendChild(textarea);
            }
        }
    }
</script>