<!-- DataTables CSS -->
<link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">
<link href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.bootstrap5.min.css" rel="stylesheet">

<!-- views/pages/memo-create.ejs -->
<!-- views/pages/memo-create.ejs -->
<main class="content">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="container custom-container">
                <h1 class="mb-1 custom-title d-flex justify-content-between align-items-center" id="toggleCreate">
                    <span>
                        <i class="fas fa-sticky-note me-1" style="cursor: pointer;"></i> 
                        Memo
                    </span>
                    <i class="fas fa-caret-down" style="cursor: pointer;"></i>
                </h1>

                <div id="createForm" style="display: block;">
                    <div class="input-group custom-input-group mb-1">
                        <label class="input-group-text custom-label" for="memo_title">Title</label>
                        <input type="text" class="form-control custom-input" id="memo_title" name="memo_title" required>
                    </div>
                    <div class="input-group custom-input-group mb-1">
                        <label class="input-group-text custom-label" for="memo_writer">Writer</label>
                        <input type="text" class="form-control custom-input" id="memo_writer" name="memo_writer" required>
                    </div>
                    <div class="input-group custom-input-group mb-1">
                        <label class="input-group-text custom-label" for="memo_dt">Date</label>
                        <input type="text" class="form-control custom-input" id="memo_dt" name="memo_dt" required>
                        <button type="button" class="btn btn-outline-secondary custom-date-btn" id="datePickerBtn">
                            <i class="far fa-calendar-alt"></i>
                        </button>
                    </div>
                    <div class="mb-1">
                        <textarea class="form-control custom-input" id="memo_contents" name="memo_contents" rows="10"></textarea>
                    </div>
                    <button type="button" class="btn btn-primary btn-sm custom-btn" id="actionButton">등록</button>
                </div>
            </div>
        </div>
        <!-- 히든 필드 추가 -->
        <input type="hidden" id="memoId" name="memoId">

        <!-- 검색조건 -->
        <div class="row mb-2">
            <div class="container custom-container">
                <h1 class="mb-1 custom-title d-flex justify-content-between align-items-center" id="toggleSearch">
                    <span>
                        <i class="fas fa-search me-1" style="cursor: pointer;"></i> 
                        Search
                    </span>
                    <i class="fas fa-caret-down" style="cursor: pointer;"></i>
                </h1>

                <div id="searchForm" style="display: none;">
                    <form id="searchMemoForm">
                        <div class="input-group custom-input-group mb-1">
                            <label class="input-group-text custom-label" for="search_memo_title">Title</label>
                            <input type="text" class="form-control custom-input" id="search_memo_title" name="search_memo_title">
                        </div>
                        <div class="input-group custom-input-group mb-1">
                            <label class="input-group-text custom-label" for="search_memo_writer">Writer</label>
                            <input type="text" class="form-control custom-input" id="search_memo_writer" name="search_memo_writer">
                        </div>
                        <div class="input-group custom-input-group mb-1">
                            <label class="input-group-text custom-label" for="search_memo_dt">Date</label>
                            <input type="date" class="form-control custom-input" id="search_memo_dt" name="search_memo_dt">
                        </div>
                        <div class="input-group custom-input-group mb-1">
                            <label class="input-group-text custom-label" for="search_memo_contents">Contents</label>
                            <input type="text" class="form-control custom-input" id="search_memo_contents" name="search_memo_contents">
                        </div>
                        <button type="button" class="btn btn-sm btn-primary" id="searchButton">Search</button>
                    </form>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="container custom-container">
                <div class="table-container">
                    <div class="table-responsive">
                        <table id="example" class="table table-striped table-hover custom-table" style="width:100%">
                            <thead>
                                <tr>
                                    <th>수정</th>
                                    <th>제목</th>
                                    <th>작성자</th>
                                    <th>날짜</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (Memo && Array.isArray(Memo) && Memo.length > 0) { %>
                                    <% Memo.forEach(memo => { %>
                                        <tr>
                                            <td><i class="fas fa-edit edit-icon" data-id="<%= memo.id %>"
                                                    data-memo_title="<%= memo.memo_title %>"
                                                    data-memo_writer="<%= memo.memo_writer %>"
                                                    data-memo_dt="<%= memo.memo_dt %>"></i></td>
                                            <td><%= memo.memo_title || '-' %></td>
                                            <td><%= memo.memo_writer || '-' %></td>
                                            <td><%= memo.memo_dt %></td>
                                        </tr>
                                    <% }) %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Summernote CSS -->
<link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css" rel="stylesheet">
<!-- Bootstrap Datepicker CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" rel="stylesheet">
<!-- DataTables CSS CDN -->
<link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">
<!-- DataTables Buttons CSS CDN -->
<link href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.bootstrap5.min.css" rel="stylesheet">

<style>
    .custom-container {
        border: 1px solid gray;
        padding: 5px;
        border-radius: 5px;
    }

    .custom-title {
        font-size: 1.0rem;
    }

    .custom-label {
        width: 100px;
        font-size: 0.7rem;
        padding: 0.15rem 0.3rem;
    }

    .custom-input {
        font-size: 0.7rem;
        padding: 0.15rem 0.3rem;
    }

    .custom-input-group {
        margin-bottom: 0.2rem !important;
    }

    .custom-btn {
        font-size: 0.7rem;
        padding: 0.15rem 0.4rem;
    }

    .custom-date-btn {
        font-size: 0.7rem;
        padding: 0.15rem 0.3rem;
    }

    .input-group-text {
        border-right: none;
    }

    .form-control {
        border-left: none;
    }

    #memo_contents {
        min-height: 200px;
    }

    .custom-table {
        font-size: 0.7rem;
        border-collapse: collapse !important;
        width: 100% !important;
    }

    .custom-table th,
    .custom-table td {
        border: 1px solid #e0e0e0 !important;
        padding: 0.2rem 0.4rem !important;
        vertical-align: middle !important;
        white-space: nowrap !important;
    }

    .custom-table thead th {
        background-color: #f8f9fa;
        border: 1px solid #e0e0e0 !important;
        font-size: 0.7rem;
    }
</style>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<!-- DataTables JS CDN -->
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
<!-- DataTables Buttons JS CDN -->
<script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.print.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.colVis.min.js"></script>
<!-- Summernote JS -->
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js"></script>
<!-- Bootstrap Datepicker JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>

<script>
    $(document).ready(function () {
        // Summernote 초기화
        if ($('#memo_contents').length) {
            $('#memo_contents').summernote({
                height: 200,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'underline', 'clear']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video']],
                    ['view', ['codeview', 'help']]
                ],
                placeholder: 'Enter memo contents here...',
                fontSizeUnits: ['px', 'pt'],
                fontSizes: ['8', '10', '12', '14', '16', '18', '20', '22', '24']
            });
            console.log('Summernote initialized');
        } else {
            console.error('Summernote #memo_contents element not found');
        }

        // DataTables 초기화
        let table = $('#example').DataTable({
            pageLength: 10,
            lengthMenu: [5, 10, 25, 50],
            dom: 'B<"row"<"col-sm-6"l><"col-sm-6"f>>rt <"row"<"col-sm-6"i><"col-sm-6"p>>',
            buttons: [
                {
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: [1, 2, 3],
                        format: {
                            body: function (data, row, column, node) {
                                return column === 0 ? '' : data;
                            }
                        }
                    }
                },
                'copy', 'print', 'colvis'
            ],
            searching: true,
            ordering: true,
            paging: true,
            info: true
        });

        // Bootstrap Datepicker 초기화
        $('#memo_dt').datepicker({
            format: 'yyyy-mm-dd',
            autoclose: true,
            todayHighlight: true
        });

        // 달력 버튼 클릭 시 Datepicker 열기
        $('#datePickerBtn').click(function () {
            $('#memo_dt').datepicker('show');
        });

        let updateBtn = null;
        let deleteBtn = null;
        let clearBtn = null;
        let searchBtn = null;

        // 수정 아이콘 클릭 이벤트 (이벤트 위임 사용)
        $(document).on("click", ".edit-icon", function () {
            const row = $(this).closest("tr");
            const memoId = $(this).data('id');
            const title = $(this).data('memo_title') || "No Title";
            const writer = $(this).data('memo_writer') || "Anonymous";
            const memo_dt = $(this).data('memo_dt') || new Date().toISOString().split('T')[0];

            $("#memo_title").val(title);
            $("#memo_writer").val(writer);
            $("#memo_dt").val(memo_dt);
            $("#memoId").val(memoId);

            // memo_contents를 별도로 AJAX로 조회
            $.ajax({
                url: `/memoContents/${memoId}`,
                type: "GET",
                success: function (response) {
                    if (response.success) {
                        $('#memo_contents').summernote('code', response.data || "<p>No content</p>");
                    } else {
                        console.error("Failed to fetch memo contents:", response.message);
                        $('#memo_contents').summernote('code', "<p>Error loading content</p>");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching memo contents:", xhr.responseText, error);
                    $('#memo_contents').summernote('code', "<p>Error loading content</p>");
                }
            });

            // 기존 버튼 제거
            if (updateBtn) updateBtn.remove();
            if (deleteBtn) deleteBtn.remove();
            if (clearBtn) clearBtn.remove();

            // 버튼 생성
            updateBtn = $("<button>")
                .text("변경")
                .addClass("btn btn-warning btn-sm custom-btn ms-2")
                .insertAfter($(".custom-btn"));
            deleteBtn = $("<button>")
                .text("삭제")
                .addClass("btn btn-danger btn-sm custom-btn ms-2")
                .insertAfter(updateBtn);
            clearBtn = $("<button>")
                .text("Clear")
                .addClass("btn btn-secondary btn-sm custom-btn ms-2")
                .insertAfter(deleteBtn);

            // 이벤트 바인딩
            updateBtn.off("click").on("click", function () {
                const memoData = {
                    memo_title: $("#memo_title").val().trim() || "No Title",
                    memo_writer: $("#memo_writer").val().trim() || "Anonymous",
                    memo_dt: $("#memo_dt").val().trim() || new Date().toISOString().split('T')[0],
                    memo_contents: $('#memo_contents').summernote('code') || "<p>No content</p>"
                };
                console.log('Sending update for id:', memoId, 'with data:', memoData);
                if (!memoData.memo_title) {
                    alert("Title is required");
                    return;
                }
                $.ajax({
                    url: `/memoUpdate/${memoId}`,
                    type: "PUT",
                    contentType: "application/json",
                    data: JSON.stringify(memoData),
                    success: function (response) {
                        console.log("Success response:", response);
                        if (response.success) {
                            alert(response.message || "Memo updated successfully!");
                            location.reload();
                        } else {
                            alert("Update failed: " + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", xhr.responseText, error);
                        alert("Update failed. Check console for details.");
                    }
                });
            });

            deleteBtn.off("click").on("click", function () {
                if (confirm("정말로 삭제하시겠습니까?")) {
                    $.ajax({
                        url: `/memoDelete/${memoId}`,
                        type: "DELETE",
                        contentType: "application/json",
                        success: function (response) {
                            console.log("Delete response:", response);
                            if (response.success) {
                                alert(response.message || "Memo deleted successfully!");
                                location.reload();
                            } else {
                                alert("Delete failed: " + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error:", xhr.responseText, error);
                            alert("Delete failed. Check console for details.");
                        }
                    });
                }
            });

            clearBtn.off("click").on("click", function () {
                $("#memo_title").val("");
                $("#memo_writer").val("");
                $("#memo_dt").val("");
                $('#memo_contents').summernote('code', "");
                $("#memoId").val("");

                if (updateBtn) updateBtn.remove();
                if (deleteBtn) deleteBtn.remove();
                if (clearBtn) clearBtn.remove();
                $(".custom-btn").text("등록").removeClass('btn-warning').addClass('btn-primary');
            });
        });

        // "Create Memo" 버튼 클릭 시 신규 생성 (AJAX POST)
        $("#actionButton").on("click", function () {
            const memoData = {
                memo_title: $("#memo_title").val().trim() || "No Title",
                memo_writer: $("#memo_writer").val().trim() || "Anonymous",
                memo_dt: $("#memo_dt").val().trim() || new Date().toISOString().split('T')[0],
                memo_contents: $('#memo_contents').summernote('code') || "<p>No content</p>"
            };
            console.log('Sending new memo data:', memoData);

            if (!memoData.memo_title) {
                alert("Title is required");
                return;
            }

            $.ajax({
                url: '/memoRegister',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(memoData),
                success: function (response) {
                    console.log("Save response:", response);
                    if (response.success) {
                        alert(response.message || "Memo saved successfully!");
                        location.reload();
                    } else {
                        alert("Save failed: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error:", xhr.responseText, error);
                    alert("Save failed. Status: " + xhr.status + ", " + xhr.responseText);
                }
            });
        });

        // 클라이언트 측 보완 (선택 사항)
        function updateActiveLink() {
            const path = window.location.pathname;
            $('.nav-link').removeClass('active');
            if (path === '/memo') {
                $('a[href="/memo"]').addClass('active');
            }
        }
        updateActiveLink();
        $(window).on('popstate', updateActiveLink);

        /*토글로 창 닫고 열기*/
        document.getElementById("toggleSearch").addEventListener("click", function () {
            let form = document.getElementById("searchForm");
            form.style.display = (form.style.display === "none" || form.style.display === "") ? "block" : "none";
        });

        document.getElementById("toggleCreate").addEventListener("click", function() {
            let form2 = document.getElementById("createForm");
            form2.style.display = (form2.style.display === "none" || form2.style.display === "") ? "block" : "none";
        });

        $("#searchButton").on("click", function () {
            var query = $('#searchMemoForm').serialize();
            table.ajax.url('/memoSearch?' + query).load();
        });
    });
</script>