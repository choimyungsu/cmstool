CREATE TABLE tb_user (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    user_name VARCHAR(50) NOT NULL,
    password VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    tel VARCHAR(50) NOT NULL,
    organization VARCHAR(100),
    department VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE tb_user
ADD CONSTRAINT unique_email UNIQUE (email);



CREATE TABLE tb_memo (
    id SERIAL PRIMARY KEY,
    memo_title VARCHAR(255) NOT NULL,
    memo_writer VARCHAR(100) NOT NULL,
    memo_dt VARCHAR(50), -- 문자열로 저장되는 날짜
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    memo_contents TEXT NOT NULL -- 큰 텍스트 데이터 저장 (Summernote 내용)
);

-- frappe-gantt // 오픈소스 활용
-- 
CREATE TABLE tb_wbs (
    id SERIAL PRIMARY KEY,                -- 자동 증가하는 기본 키
    project_id VARCHAR(255) NOT NULL,     -- 프로젝트 ID (문자열 타입)
    task_name VARCHAR(255) NOT NULL,      -- 작업 이름
    start_date VARCHAR(255) NOT NULL,     -- 시작일 (문자열로 저장)
    end_date VARCHAR(255) NOT NULL,       -- 종료일 (문자열로 저장)
    task_progress INT DEFAULT 0,          -- 작업 진행률 (%)
    task_user VARCHAR(100),               -- 담당자 이름 또는 ID
    created_at TIMESTAMP DEFAULT NOW(),   -- 생성 일시
    updated_at TIMESTAMP DEFAULT NOW()    -- 수정 일시 (업데이트 시 변경 가능)
);



-- tb_issue 테이블 생성
CREATE TABLE tb_issue (
    id SERIAL PRIMARY KEY,
    project_id VARCHAR(255),              -- 프로젝트 ID 추가
    issue_gubun VARCHAR(50),              -- 이슈 구분 (예: 버그, 기능요청 등)
    issue_title VARCHAR(255) NOT NULL,    -- 이슈 제목 (필수 입력)
    issue_contents TEXT,                  -- 이슈 내용 (Summernote 대량 텍스트)
    issue_status VARCHAR(50),             -- 이슈 상태 (예: open, closed 등)
    issue_progress TEXT,                  -- 진행 상황 (Summernote 대량 텍스트)
    issue_patch_version VARCHAR(20),      -- 패치 버전 (예: v1.0.0)
    issue_finish_date VARCHAR(20),        -- 완료일 (문자열 형식)
    issue_create_date VARCHAR(20),        -- 생성일 (문자열 형식, 필요 시 별도 입력)
    issue_fixplan_date VARCHAR(20),        -- fix예정일 (문자열 형식, 필요 시 별도 입력)
    link_issue_id INTEGER,                -- 연관된 이슈 ID (외래 키)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 시스템 생성일
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 시스템 변경일
    CONSTRAINT fk_link_issue FOREIGN KEY (link_issue_id) REFERENCES tb_issue(id) ON DELETE SET NULL
);


--tb_project 테이블 생성
CREATE TABLE tb_project (
    id SERIAL PRIMARY KEY,
    pjt_uid VARCHAR(255) NOT NULL,  -- 프로젝트 유일한 ID
    pjt_name VARCHAR(255) NOT NULL, -- 프로젝트명
    pjt_desc TEXT,   -- 프로젝트 설명
    pjt_open VARCHAR(255), -- 프로젝트 공개여부
    pjt_start_date VARCHAR(255), -- 프로젝트 시작일
    pjt_end_date VARCHAR(255),  -- 프로젝트 종료일 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
);


-- tb_master_code 테이블 생성
CREATE TABLE tb_master_code (
    id SERIAL PRIMARY KEY,
    code_group VARCHAR(50) NOT NULL,
    code_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- tb_slave_code 테이블 생성
CREATE TABLE tb_slave_code (
    id SERIAL PRIMARY KEY,
    master_id INTEGER NOT NULL,
    code_value VARCHAR(50) NOT NULL,
    code_name VARCHAR(100) NOT NULL,
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (master_id) REFERENCES tb_master_code(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 프로젝트와 참여인원 매핑
CREATE TABLE tb_project_user (
    project_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'MEMBER',
    joined_at VARCHAR(50) ,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    PRIMARY KEY (project_id, user_id),
    FOREIGN KEY (project_id) REFERENCES tb_project(id) ,
    FOREIGN KEY (user_id) REFERENCES tb_user(id) 
);

-- 트리구조 wbs
CREATE TABLE tb_treewbs (
    id SERIAL PRIMARY KEY,           -- Auto-incrementing ID as primary key
    task VARCHAR(255) NOT NULL,      -- Task name
    start_date VARCHAR(10),          -- Start date as VARCHAR (e.g., '2025-03-11')
    end_date VARCHAR(10),            -- End date as VARCHAR (e.g., '2025-03-12')
    progress INTEGER CHECK (progress >= 0 AND progress <= 100), -- Progress (0-100)
    assignee VARCHAR(100),           -- Assignee name
    parent_id VARCHAR(100) 
);


-- 모든관리
CREATE TABLE tb_tree (
    id SERIAL PRIMARY KEY,          
    task VARCHAR(255) NOT NULL,
    seq INT NOT NULL DEFAULT 0,  
    parent_id VARCHAR(100) 
);




CREATE TABLE tb_contents (
    id SERIAL PRIMARY KEY,                -- 자동 증가하는 기본 키
    title VARCHAR,                       -- 제목
    gubun VARCHAR,                       -- 구분
    note1 TEXT,                          -- 대량 텍스트용
    note2 TEXT,                          -- 대량 텍스트용
    note3 TEXT,                          -- 대량 텍스트용
    status VARCHAR,                      -- 상태
    create_user VARCHAR,                 -- 생성자
    assignee VARCHAR,                    -- 담당자
    start_date VARCHAR,                  -- 시작일
    end_date VARCHAR,                    -- 종료일
    plan_date VARCHAR,                   -- 계획일
    memo1 VARCHAR,                       -- 메모1
    memo2 VARCHAR,                       -- 메모2
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- 생성 시간 (자동)
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP   -- 수정 시간 (자동)
);

/*###########트리거까진 생성하지 말자###############*/

-- updated_at을 자동 갱신하기 위한 트리거 함수 생성
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- tb_contents 테이블에 트리거 설정
CREATE TRIGGER trigger_update_updated_at
BEFORE UPDATE ON tb_contents
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

/*###########트리거까진 생성하지 말자###############*/

-- tree메뉴와 contents 매핑

CREATE TABLE tb_tree_contents (
    id SERIAL PRIMARY KEY,                       -- 자동 증가 기본 키
    tree_id INTEGER NOT NULL,                    -- tb_tree의 id 참조
    contents_id INTEGER NOT NULL,                -- tb_contents의 id 참조
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- 생성 시간 (자동)
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- 수정 시간 (자동)
    CONSTRAINT fk_tree FOREIGN KEY (tree_id) REFERENCES tb_tree(id) ON DELETE CASCADE,  -- tb_tree 외래 키
    CONSTRAINT fk_contents FOREIGN KEY (contents_id) REFERENCES tb_contents(id) ON DELETE CASCADE,  -- tb_contents 외래 키
    CONSTRAINT unique_tree_contents UNIQUE (tree_id, contents_id)  -- 중복 매핑 방지
);







